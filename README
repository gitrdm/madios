# madios

**Purpose:**
This project implements the ADIOS (Automatic DIstillation Of Structure) algorithm for unsupervised grammar induction from text corpora. It reads a set of sentences and induces grammatical patterns, which can be used for natural language processing and parser development.

## Project Structure

- `src/main.cpp` – Program entry point.
- `src/RDSGraph.*` – Main graph structure for pattern discovery.
- `src/RDSNode.*` – Nodes in the graph (words/patterns).
- `src/BasicSymbol.*` – Handles basic symbols (tokens).
- `src/SearchPath.*` – Manages search paths in the graph.
- `src/SpecialLexicons.*` – Handles special lexicon entries.
- `src/SignificantPattern.*` – Detects significant patterns.
- `src/EquivalenceClass.*` – Groups similar patterns.
- `src/maths/` – Math utilities.
- `src/utils/` – Utility functions (string, time, misc).
- `test/corpus.txt` – Example input corpus.

## Building

### With CMake (Recommended)

```sh
mkdir -p build
cd build
cmake ..
make
```

The resulting executable will be `build/madios`.

### With qmake (Legacy)

```sh
qmake ModifiedADIOS.pro
make
```

The resulting executable will be `madios` in the project root.

## Command-Line Usage

```
./build/madios <filename> <eta> <alpha> <context_size> <coverage> [-o <outputfile>] [--json] [--pcfg] [number_of_new_sequences]
```

- `<filename>`: Path to the input corpus file (see below for format).
- `<eta>`: Threshold for detecting divergence in the RDS graph (e.g., 0.9).
- `<alpha>`: Significance test threshold (e.g., 0.01 or 0.1).
- `<context_size>`: Size of the context window for equivalence class search (e.g., 5).
- `<coverage>`: Threshold for bootstrapping equivalence classes (e.g., 0.65).
- `-o <outputfile>`: (Optional) Write all output to the specified file instead of stdout.
- `--json`: Output all results as JSON (machine-readable).
- `--pcfg`: Output only the learned grammar in standard PCFG format (see below).
- `[number_of_new_sequences]`: (Optional) Number of new sequences to generate from the grammar.

### Example

```sh
./build/madios test/test_madios.txt 0.9 0.01 5 0.65 -o results.txt --pcfg
```

### CLI Options

- `-o <outputfile>`: Write all output to the specified file instead of printing to the terminal.
- `--json`: Outputs the corpus, lexicon, search paths, and grammar in JSON format. Example:
  ```json
  {
    "corpus": [["A", "B"], ["A", "C"]],
    "search_paths": [["*", "A", "B", "#"]],
    "lexicon": [...],
    "grammar": "E0 -> A [0.5]\nE0 -> B [0.5]",
    "timing": 0.0123
  }
  ```
- `--pcfg`: Outputs only the learned grammar in standard PCFG format (one rule per line):
  ```
  E0 -> A [0.5]
  E0 -> B [0.5]
  S -> A B [1.0]
  ...
  ```

## Input Corpus Format

Each line is a sentence. ADIOS-style input uses `*` and `#` as start/end markers, but plain space-separated text is also accepted. Example:

```
* Cindy believes that Joe believes that to please is easy #
* Cindy believes that Cindy believes that to read is tough #
* Pam thinks that Jim believes that to please is tough #
...
```

## Example PCFG Output

When run with `--pcfg`, the output will look like:

```
E27 -> believes [0.730769]
E27 -> thinks [0.269231]
P28 -> E27 that [1]
E29 -> read [0.5]
E29 -> please [0.5]
P30 -> P28 to E29 is [1]
E31 -> Cindy [0.4]
E31 -> Jim [0.1]
E31 -> Beth [0.1]
E31 -> Joe [0.4]
P32 -> P28 E31 P30 [1]
E33 -> cat [0.3]
E33 -> cow [0.1]
E33 -> horse [0.4]
E33 -> dog [0.2]
P34 -> the E33 [1]
P35 -> to E29 [1]
E36 -> easy [0.666667]
E36 -> eager [0.333333]
P37 -> is E36 P35 [1]
S -> Cindy P32 easy [1.0]
S -> Cindy P32 tough [1.0]
S -> Pam P32 tough [1.0]
S -> Beth P28 George P30 easy [1.0]
S -> Pam P32 easy [1.0]
S -> Beth P32 tough [1.0]
S -> that Cindy P37 annoys Cindy [1.0]
S -> that P34 P37 disturbs P34 [1.0]
S -> that P34 P37 annoys P34 [1.0]
S -> that Cindy P37 bothers P34 [1.0]
S -> that P34 P37 annoys Jim [1.0]
S -> Pam P32 easy [1.0]
S -> that P34 P37 worries P34 [1.0]
S -> Cindy P28 George P30 easy [1.0]
S -> Pam P28 Pam P30 easy [1.0]
S -> Beth P32 tough [1.0]
S -> Cindy P32 easy [1.0]
S -> that P34 is tough P35 disturbs P34 [1.0]
S -> Beth P32 tough [1.0]
S -> Cindy P32 easy [1.0]
```

Probabilities are normalized for each LHS (left-hand side).

## Output Details

- **Default output:** Human-readable, includes corpus, lexicon, search paths, and grammar.
- **-o <outputfile>:** All output is written to the specified file instead of stdout.
- **--json:** Machine-readable JSON with all results.
- **--pcfg:** Only the PCFG rules, suitable for downstream parsing tools.

## Running Tests

This project uses [Catch2](https://github.com/catchorg/Catch2) for unit testing. To set up and run tests:

1. Download the Catch2 single-header file (if not already present):

```sh
curl -L -o tests/catch.hpp https://github.com/catchorg/Catch2/releases/download/v2.13.10/catch.hpp
```

2. Build and run tests:

```sh
./build_and_install.sh
./run_all_tests.sh
```

Or, to run the main C++ test binary directly:

```sh
./build/tests_basic
```

Or, to run all tests with CTest:

```sh
cd build
ctest --output-on-failure
```

### CLI Output Test

A shell script test is provided to check the CLI `--pcfg` output:

```sh
cd tests
./test_cli_pcfg_output.sh
```

This checks that the CLI produces valid PCFG output and that probabilities are normalized.

## Further Reading

- [ADIOS Algorithm Paper](https://www.cs.bgu.ac.il/~elhadad/nlp09/ADIOS.pdf)
- [C++ Language Reference](https://en.cppreference.com/)
